import { JSDOM } from 'jsdom';
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
import { renderFolder, handleBookmarkEdit } from '../src/scripts/newtab-core';
import type { BookmarkFolder } from '../src/scripts/types';

// „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÁ∑®ÈõÜÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà
describe('„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÁ∑®ÈõÜÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà', () => {
  let dom: JSDOM;
  let document: Document;

  beforeEach(() => {
    dom = new JSDOM(
      `<!DOCTYPE html><html><body><div id="test"></div></body></html>`,
      { url: 'chrome-extension://test/newtab.html' }
    );

    document = dom.window.document;

    // „Ç∞„É≠„Éº„Éê„É´„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíË®≠ÂÆö
    Object.defineProperty(globalThis, 'document', {
      value: document,
      writable: true,
      configurable: true,
    });

    // Chrome API „ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    const mockChrome = globalThis.chrome as any;
    mockChrome.bookmarks.search = vi.fn();
    mockChrome.bookmarks.update = vi.fn();
    mockChrome.bookmarks.move = vi.fn();
    mockChrome.bookmarks.getTree = vi.fn();
  });

  afterEach(() => {
    dom.window.close();
    vi.clearAllMocks();
  });

  it('Á∑®ÈõÜ„Éú„Çø„É≥„Åå„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Ç¢„Ç§„ÉÜ„É†„Å´Ê≠£„Åó„Åè„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã', () => {
    const testBookmark: BookmarkFolder = {
      id: 'folder-1',
      title: '„ÉÜ„Çπ„Éà„Éï„Ç©„É´„ÉÄ',
      bookmarks: [
        {
          title: '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ',
          url: 'https://example.com',
          favicon: null,
        },
      ],
      subfolders: [],
      expanded: true,
    };

    const html = renderFolder(testBookmark);

    // Á∑®ÈõÜ„Éú„Çø„É≥„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(html).toContain('bookmark-edit-btn');
    expect(html).toContain('‚úèÔ∏è');
    expect(html).toContain('data-bookmark-url="https://example.com"');
    expect(html).toContain('data-bookmark-title="„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ"');
    expect(html).toContain('title="Á∑®ÈõÜ"');
  });

  it('Á∑®ÈõÜ„Éú„Çø„É≥„Å®ÂâäÈô§„Éú„Çø„É≥„Åå‰∏°ÊñπË°®Á§∫„Åï„Çå„Çã', () => {
    const testBookmark: BookmarkFolder = {
      id: 'folder-1',
      title: '„ÉÜ„Çπ„Éà„Éï„Ç©„É´„ÉÄ',
      bookmarks: [
        {
          title: '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ',
          url: 'https://example.com',
          favicon: null,
        },
      ],
      subfolders: [],
      expanded: true,
    };

    const html = renderFolder(testBookmark);

    // ‰∏°Êñπ„ÅÆ„Éú„Çø„É≥„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(html).toContain('bookmark-edit-btn');
    expect(html).toContain('bookmark-delete-btn');
    expect(html).toContain('bookmark-actions');
    expect(html).toContain('‚úèÔ∏è');
    expect(html).toContain('üóëÔ∏è');
  });

  it('„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
    // Chrome API „ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆöÔºà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÔºâ
    const mockChrome = globalThis.chrome as any;
    mockChrome.bookmarks.search.mockResolvedValue([]);

    // console.error „ÅÆ„É¢„ÉÉ„ÇØ
    const consoleErrorSpy = vi
      .spyOn(console, 'error')
      .mockImplementation(() => {});

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∑®ÈõÜ„Éú„Çø„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàê
    const editBtn = document.createElement('button');
    editBtn.setAttribute('data-bookmark-url', 'https://example.com');
    editBtn.setAttribute('data-bookmark-title', '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ');

    // Á∑®ÈõÜÂá¶ÁêÜ„ÇíÁõ¥Êé•ÂÆüË°å
    await handleBookmarkEdit(editBtn);

    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂá∫Âäõ„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(consoleErrorSpy).toHaveBeenCalledWith(
      '‚ùå Á∑®ÈõÜÂØæË±°„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü'
    );
    expect(mockChrome.bookmarks.update).not.toHaveBeenCalled();
    expect(mockChrome.bookmarks.move).not.toHaveBeenCalled();
  });

  it('URL„ÇÑ„Çø„Ç§„Éà„É´„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
    // console.error „ÅÆ„É¢„ÉÉ„ÇØ
    const consoleErrorSpy = vi
      .spyOn(console, 'error')
      .mockImplementation(() => {});

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∑®ÈõÜ„Éú„Çø„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàêÔºàURL„Åæ„Åü„ÅØ„Çø„Ç§„Éà„É´„ÅåÊ¨†„Åë„Å¶„ÅÑ„ÇãÔºâ
    const editBtn = document.createElement('button');
    // data-bookmark-url „Å® data-bookmark-title „ÇíË®≠ÂÆö„Åó„Å™„ÅÑ

    // Á∑®ÈõÜÂá¶ÁêÜ„ÇíÁõ¥Êé•ÂÆüË°å
    await handleBookmarkEdit(editBtn);

    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂá∫Âäõ„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(consoleErrorSpy).toHaveBeenCalledWith(
      '‚ùå „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÅÆURL„Åæ„Åü„ÅØ„Çø„Ç§„Éà„É´„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü'
    );
    expect(chrome.bookmarks.search).not.toHaveBeenCalled();
  });

  it('Á∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', async () => {
    // Chrome API „ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    const mockChrome = globalThis.chrome as any;
    mockChrome.bookmarks.search.mockResolvedValue([
      {
        id: 'bookmark-1',
        title: '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ',
        url: 'https://example.com',
        parentId: 'folder-1',
      },
    ]);

    mockChrome.bookmarks.getTree.mockResolvedValue([
      {
        id: '0',
        title: 'root',
        children: [
          {
            id: '1',
            title: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Éê„Éº',
            children: [
              {
                id: 'folder-1',
                title: '„Éï„Ç©„É´„ÉÄ1',
                children: [],
              },
            ],
          },
        ],
      },
    ]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∑®ÈõÜ„Éú„Çø„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàê
    const editBtn = document.createElement('button');
    editBtn.setAttribute('data-bookmark-url', 'https://example.com');
    editBtn.setAttribute('data-bookmark-title', '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ');

    // Á∑®ÈõÜÂá¶ÁêÜ„ÇíÂÆüË°å
    await handleBookmarkEdit(editBtn);

    // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    const dialog = document.getElementById('edit-dialog');
    expect(dialog).toBeTruthy();

    // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç
    expect(dialog?.querySelector('#edit-title')).toBeTruthy();
    expect(dialog?.querySelector('#edit-url')).toBeTruthy();
    expect(dialog?.querySelector('#edit-folder')).toBeTruthy();
    expect(dialog?.querySelector('.edit-dialog-save')).toBeTruthy();
    expect(dialog?.querySelector('.edit-dialog-cancel')).toBeTruthy();
  });

  it('Á∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆÂàùÊúüÂÄ§„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Çã', async () => {
    // Chrome API „ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    const mockChrome = globalThis.chrome as any;
    mockChrome.bookmarks.search.mockResolvedValue([
      {
        id: 'bookmark-1',
        title: '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ',
        url: 'https://example.com',
        parentId: 'folder-1',
      },
    ]);

    mockChrome.bookmarks.getTree.mockResolvedValue([
      {
        id: '0',
        title: 'root',
        children: [
          {
            id: '1',
            title: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Éê„Éº',
            children: [
              {
                id: 'folder-1',
                title: '„Éï„Ç©„É´„ÉÄ1',
                children: [],
              },
            ],
          },
        ],
      },
    ]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∑®ÈõÜ„Éú„Çø„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàê
    const editBtn = document.createElement('button');
    editBtn.setAttribute('data-bookmark-url', 'https://example.com');
    editBtn.setAttribute('data-bookmark-title', '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ');

    // Á∑®ÈõÜÂá¶ÁêÜ„ÇíÂÆüË°å
    await handleBookmarkEdit(editBtn);

    // ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÅÆÂàùÊúüÂÄ§„ÇíÁ¢∫Ë™ç
    const titleInput = document.getElementById(
      'edit-title'
    ) as HTMLInputElement;
    const urlInput = document.getElementById('edit-url') as HTMLInputElement;
    const folderSelect = document.getElementById(
      'edit-folder'
    ) as HTMLSelectElement;

    expect(titleInput?.value).toBe('„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ');
    expect(urlInput?.value).toBe('https://example.com');
    expect(folderSelect?.value).toBe('folder-1');
  });

  it('„Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥„Åß„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåÈñâ„Åò„Çã', async () => {
    // Chrome API „ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    const mockChrome = globalThis.chrome as any;
    mockChrome.bookmarks.search.mockResolvedValue([
      {
        id: 'bookmark-1',
        title: '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ',
        url: 'https://example.com',
        parentId: 'folder-1',
      },
    ]);

    mockChrome.bookmarks.getTree.mockResolvedValue([
      {
        id: '0',
        title: 'root',
        children: [
          {
            id: '1',
            title: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Éê„Éº',
            children: [
              {
                id: 'folder-1',
                title: '„Éï„Ç©„É´„ÉÄ1',
                children: [],
              },
            ],
          },
        ],
      },
    ]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∑®ÈõÜ„Éú„Çø„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàê
    const editBtn = document.createElement('button');
    editBtn.setAttribute('data-bookmark-url', 'https://example.com');
    editBtn.setAttribute('data-bookmark-title', '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ');

    // Á∑®ÈõÜÂá¶ÁêÜ„ÇíÂÆüË°å
    await handleBookmarkEdit(editBtn);

    // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    let dialog = document.getElementById('edit-dialog');
    expect(dialog).toBeTruthy();

    // „Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    const cancelBtn = dialog?.querySelector(
      '.edit-dialog-cancel'
    ) as HTMLElement;
    cancelBtn?.click();

    // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåÈñâ„Åò„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    dialog = document.getElementById('edit-dialog');
    expect(dialog).toBeFalsy();
  });

  it('„Éê„É™„Éá„Éº„Ç∑„Éß„É≥: Á©∫„ÅÆÂêçÂâç„Åß„Ç®„É©„Éº„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
    // Chrome API „ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    const mockChrome = globalThis.chrome as any;
    mockChrome.bookmarks.search.mockResolvedValue([
      {
        id: 'bookmark-1',
        title: '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ',
        url: 'https://example.com',
        parentId: 'folder-1',
      },
    ]);

    mockChrome.bookmarks.getTree.mockResolvedValue([
      {
        id: '0',
        title: 'root',
        children: [
          {
            id: '1',
            title: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Éê„Éº',
            children: [
              {
                id: 'folder-1',
                title: '„Éï„Ç©„É´„ÉÄ1',
                children: [],
              },
            ],
          },
        ],
      },
    ]);

    // alert „ÅÆ„É¢„ÉÉ„ÇØ
    const alertSpy = vi.spyOn(globalThis, 'alert').mockImplementation(() => {});

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∑®ÈõÜ„Éú„Çø„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàê
    const editBtn = document.createElement('button');
    editBtn.setAttribute('data-bookmark-url', 'https://example.com');
    editBtn.setAttribute('data-bookmark-title', '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ');

    // Á∑®ÈõÜÂá¶ÁêÜ„ÇíÂÆüË°å
    await handleBookmarkEdit(editBtn);

    // ÂêçÂâç„ÇíÁ©∫„Å´„Åó„Å¶‰øùÂ≠ò„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    const titleInput = document.getElementById(
      'edit-title'
    ) as HTMLInputElement;
    const saveBtn = document.querySelector('.edit-dialog-save') as HTMLElement;

    titleInput.value = '';
    saveBtn?.click();

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(alertSpy).toHaveBeenCalledWith('ÂêçÂâç„Å®URL„ÅØÂøÖÈ†à„Åß„Åô„ÄÇ');
    expect(mockChrome.bookmarks.update).not.toHaveBeenCalled();
  });

  it('Á∑®ÈõÜÂá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
    // Chrome API „ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    const mockChrome = globalThis.chrome as any;
    mockChrome.bookmarks.search.mockResolvedValue([
      {
        id: 'bookmark-1',
        title: '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ',
        url: 'https://example.com',
        parentId: 'folder-1',
      },
    ]);

    mockChrome.bookmarks.getTree.mockResolvedValue([
      {
        id: '0',
        title: 'root',
        children: [
          {
            id: '1',
            title: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Éê„Éº',
            children: [
              {
                id: 'folder-1',
                title: '„Éï„Ç©„É´„ÉÄ1',
                children: [],
              },
            ],
          },
        ],
      },
    ]);

    // Êõ¥Êñ∞„Åß„Ç®„É©„Éº„ÇíÁô∫Áîü„Åï„Åõ„Çã
    mockChrome.bookmarks.update.mockRejectedValue(
      new Error('Êõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    );

    // console.error „Å® alert „ÅÆ„É¢„ÉÉ„ÇØ
    const consoleErrorSpy = vi
      .spyOn(console, 'error')
      .mockImplementation(() => {});
    const alertSpy = vi.spyOn(globalThis, 'alert').mockImplementation(() => {});

    // location.reload „ÅÆ„É¢„ÉÉ„ÇØ
    const reloadSpy = vi.fn();
    globalThis.location = { reload: reloadSpy } as any;

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∑®ÈõÜ„Éú„Çø„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàê
    const editBtn = document.createElement('button');
    editBtn.setAttribute('data-bookmark-url', 'https://example.com');
    editBtn.setAttribute('data-bookmark-title', '„ÉÜ„Çπ„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ');

    // Á∑®ÈõÜÂá¶ÁêÜ„ÇíÂÆüË°å
    await handleBookmarkEdit(editBtn);

    // ‰øùÂ≠ò„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
    const saveBtn = document.querySelector('.edit-dialog-save') as HTMLElement;
    saveBtn?.click();

    // ÈùûÂêåÊúüÂá¶ÁêÜ„ÅÆÂÆå‰∫Ü„ÇíÂæÖ„Å§
    await new Promise((resolve) => setTimeout(resolve, 0));

    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂá∫Âäõ„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(consoleErrorSpy).toHaveBeenCalledWith(
      '‚ùå „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:',
      expect.any(Error)
    );
    expect(alertSpy).toHaveBeenCalledWith('„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    expect(reloadSpy).not.toHaveBeenCalled();
  });
});
